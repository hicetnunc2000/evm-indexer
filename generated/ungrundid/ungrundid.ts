// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class idLog extends ethereum.Event {
  get params(): idLog__Params {
    return new idLog__Params(this);
  }
}

export class idLog__Params {
  _event: idLog;

  constructor(event: idLog) {
    this._event = event;
  }

  get _metadata(): string {
    return this._event.parameters[0].value.toString();
  }

  get _subjkt(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class ungrundid__idsMetadataResult {
  value0: string;
  value1: Address;
  value2: boolean;

  constructor(value0: string, value1: Address, value2: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    return map;
  }
}

export class ungrundid extends ethereum.SmartContract {
  static bind(address: Address): ungrundid {
    return new ungrundid("ungrundid", address);
  }

  compareStrings(a: string, b: string): boolean {
    let result = super.call(
      "compareStrings",
      "compareStrings(string,string):(bool)",
      [ethereum.Value.fromString(a), ethereum.Value.fromString(b)]
    );

    return result[0].toBoolean();
  }

  try_compareStrings(a: string, b: string): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "compareStrings",
      "compareStrings(string,string):(bool)",
      [ethereum.Value.fromString(a), ethereum.Value.fromString(b)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  entries(param0: Address): boolean {
    let result = super.call("entries", "entries(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_entries(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("entries", "entries(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  ids(param0: string): boolean {
    let result = super.call("ids", "ids(string):(bool)", [
      ethereum.Value.fromString(param0)
    ]);

    return result[0].toBoolean();
  }

  try_ids(param0: string): ethereum.CallResult<boolean> {
    let result = super.tryCall("ids", "ids(string):(bool)", [
      ethereum.Value.fromString(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  idsMetadata(param0: string): ungrundid__idsMetadataResult {
    let result = super.call(
      "idsMetadata",
      "idsMetadata(string):(string,address,bool)",
      [ethereum.Value.fromString(param0)]
    );

    return new ungrundid__idsMetadataResult(
      result[0].toString(),
      result[1].toAddress(),
      result[2].toBoolean()
    );
  }

  try_idsMetadata(
    param0: string
  ): ethereum.CallResult<ungrundid__idsMetadataResult> {
    let result = super.tryCall(
      "idsMetadata",
      "idsMetadata(string):(string,address,bool)",
      [ethereum.Value.fromString(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ungrundid__idsMetadataResult(
        value[0].toString(),
        value[1].toAddress(),
        value[2].toBoolean()
      )
    );
  }

  registries(param0: Address): string {
    let result = super.call("registries", "registries(address):(string)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toString();
  }

  try_registries(param0: Address): ethereum.CallResult<string> {
    let result = super.tryCall("registries", "registries(address):(string)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class RegisterCall extends ethereum.Call {
  get inputs(): RegisterCall__Inputs {
    return new RegisterCall__Inputs(this);
  }

  get outputs(): RegisterCall__Outputs {
    return new RegisterCall__Outputs(this);
  }
}

export class RegisterCall__Inputs {
  _call: RegisterCall;

  constructor(call: RegisterCall) {
    this._call = call;
  }

  get _id(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _metadata(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class RegisterCall__Outputs {
  _call: RegisterCall;

  constructor(call: RegisterCall) {
    this._call = call;
  }
}
