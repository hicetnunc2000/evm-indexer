// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class swapLog extends ethereum.Event {
  get params(): swapLog__Params {
    return new swapLog__Params(this);
  }
}

export class swapLog__Params {
  _event: swapLog;

  constructor(event: swapLog) {
    this._event = event;
  }

  get erc1155(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get op(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get swapId(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class wuweiswapv1__swapsResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: boolean;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    return map;
  }
}

export class wuweiswapv1 extends ethereum.SmartContract {
  static bind(address: Address): wuweiswapv1 {
    return new wuweiswapv1("wuweiswapv1", address);
  }

  fee(): BigInt {
    let result = super.call("fee", "fee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_fee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("fee", "fee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  manager(): Address {
    let result = super.call("manager", "manager():(address)", []);

    return result[0].toAddress();
  }

  try_manager(): ethereum.CallResult<Address> {
    let result = super.tryCall("manager", "manager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  nonce(): BigInt {
    let result = super.call("nonce", "nonce():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nonce(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonce", "nonce():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  swaps(param0: BigInt): wuweiswapv1__swapsResult {
    let result = super.call(
      "swaps",
      "swaps(uint256):(address,address,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new wuweiswapv1__swapsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBoolean()
    );
  }

  try_swaps(param0: BigInt): ethereum.CallResult<wuweiswapv1__swapsResult> {
    let result = super.tryCall(
      "swaps",
      "swaps(uint256):(address,address,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new wuweiswapv1__swapsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBoolean()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _manager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _fee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CancelSwapCall extends ethereum.Call {
  get inputs(): CancelSwapCall__Inputs {
    return new CancelSwapCall__Inputs(this);
  }

  get outputs(): CancelSwapCall__Outputs {
    return new CancelSwapCall__Outputs(this);
  }
}

export class CancelSwapCall__Inputs {
  _call: CancelSwapCall;

  constructor(call: CancelSwapCall) {
    this._call = call;
  }

  get _swapId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelSwapCall__Outputs {
  _call: CancelSwapCall;

  constructor(call: CancelSwapCall) {
    this._call = call;
  }
}

export class CollectCall extends ethereum.Call {
  get inputs(): CollectCall__Inputs {
    return new CollectCall__Inputs(this);
  }

  get outputs(): CollectCall__Outputs {
    return new CollectCall__Outputs(this);
  }
}

export class CollectCall__Inputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get _swapId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CollectCall__Outputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }
}

export class SwapCall extends ethereum.Call {
  get inputs(): SwapCall__Inputs {
    return new SwapCall__Inputs(this);
  }

  get outputs(): SwapCall__Outputs {
    return new SwapCall__Outputs(this);
  }
}

export class SwapCall__Inputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _erc1155(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class SwapCall__Outputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }
}

export class UpdateFeeCall extends ethereum.Call {
  get inputs(): UpdateFeeCall__Inputs {
    return new UpdateFeeCall__Inputs(this);
  }

  get outputs(): UpdateFeeCall__Outputs {
    return new UpdateFeeCall__Outputs(this);
  }
}

export class UpdateFeeCall__Inputs {
  _call: UpdateFeeCall;

  constructor(call: UpdateFeeCall) {
    this._call = call;
  }

  get _fee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateFeeCall__Outputs {
  _call: UpdateFeeCall;

  constructor(call: UpdateFeeCall) {
    this._call = call;
  }
}

export class UpdateManagerCall extends ethereum.Call {
  get inputs(): UpdateManagerCall__Inputs {
    return new UpdateManagerCall__Inputs(this);
  }

  get outputs(): UpdateManagerCall__Outputs {
    return new UpdateManagerCall__Outputs(this);
  }
}

export class UpdateManagerCall__Inputs {
  _call: UpdateManagerCall;

  constructor(call: UpdateManagerCall) {
    this._call = call;
  }

  get _manager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateManagerCall__Outputs {
  _call: UpdateManagerCall;

  constructor(call: UpdateManagerCall) {
    this._call = call;
  }
}
